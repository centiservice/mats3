// Customize the Gradle Wrapper generation task.
wrapper {
    gradleVersion = "8.5"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

allprojects {
    group = 'io.mats3'
    version = 'RC-1.0.0.RC2+2025-04-03'

    layout.getBuildDirectory().set(new File("build-gradle"))
}

// Versions for all libraries used throughout the subprojects
ext {
    activeMqVersion = '5.18.5'
    artemisMqVersion = '2.37.0'
    springVersion = '5.3.33' // Spring 6 depends on Java 17 and Jakarta EE 9+
    // https://github.com/micrometer-metrics/micrometer/wiki/1.13-Migration-Guide
    micrometerVersion = '1.12.10' // 1.13.x have changed use of prometheus, and we need to sync.
    jacksonVersion = '2.17.2'
    slf4jVersion = '2.0.16'
    javaxInjectVersion = '1'
    javaxAnnotationVersion = '1.3.2'
    stbHealthCheckVersion = '0.4.0+2023-04-25' // For 'MatsEagerCacheStorebrandHealthCheck'

    // For the JUnit testing tools - including the library tests
    junitVersion = '4.13.2'
    // For the Jupiter testing tools
    jupiterVersion = '5.11.0'
    jupiterPlatformVersion = '1.11.0'

    // For testing
    logbackVersion = '1.5.8'
    h2Version = '2.3.232'
    jettyVersion = '9.4.56.v20240826'
    hibernateVersion = '5.6.15.Final' // Hibernate 6 depends on Jakarta.persistence. Holding back for now, 2023-10-27
    remockVersion = '2.0.0'
    mockitoVersion = '5.15.2'

    // Need the JMS API to build several modules, but ONLY on 'compileOnly' and 'testCompileOnly'!
    // On runtime, the JMS API will be provided by the user. For tests, by 'mats-test' which includes an
    // 'implementation' dependency on ActiveMQ & Artemis Clients, which again depends on the JMS 2.0.3 API.
    // (that version is still using the javax.jms package namespace, though.)
    //
    // Ideally, we want to depend on the JMS API javax.jms v1.1-rev-1, i.e. the old JMS API - but we also want be able
    // to run with javax.jms 2.0, and jakarta.jms v2.0.3
    //
    // However, IntelliJ has a bug (https://youtrack.jetbrains.com/issue/IDEA-247645) which makes it impossible to
    // run anything inside IntelliJ in such a "split dependency" mode: Even though we say 'compileOnly', it still chucks
    // the dependency onto the test runtime classpath. It is crucial to be able to develop and test inside IntelliJ.
    // However, this then leads to a problem where the places we decorate e.g. a JMS ConnectionFactory: The 2.0 API
    // includes multiple new methods, which return new classes, so we can't switch between these versions without
    // also changing the java files (3 instances)
    //
    // Also, since ActiveMQ is, AFAIK, the latest holdout on JMS 1.1, it makes little difference to move up to
    // Jakarta's JMS 2.0.3 (which still uses the javax.jms package namespace, contrasted with JMS 3.0, which uses
    // jakarta.jms). This was the old dep: 'javax.jms:jms-api:1.1-rev-1'
    jmsApiDependency = 'jakarta.jms:jakarta.jms-api:2.0.3'
}

// :: Find which Java version to use for the toolchain.
int javaVersion = 11;
if (project.properties.containsKey('mats.build.java_version')) {
    javaVersion = Integer.parseInt((String) project.properties['mats.build.java_version'])
    println "Specified Java version for toolchain, using Java version: $javaVersion"
}

// :: Note: Two different subproject-blocks, one for all common elements, and one for publishing.

// Common for all subprojects, even 'mats-api-test'
subprojects {
    apply plugin: 'java-library'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion))
        }
        withJavadocJar()
        withSourcesJar()
    }

    repositories { mavenCentral() }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
        if (javaVersion >= 21) {
            options.compilerArgs += ['-Xlint:-this-escape']
        }
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('--frames')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Mats3',
                    'Implementation-Version': archiveVersion
        }
    }

    test {
        /*
         * All tests employ MatsTestBroker to get hold of a JMS ConnectionFactory to use for its MatsFactory creation.
         * This per default starts an in-vm ActiveMQ broker, and connects a client ActiveMQConnectionFactory to this.
         *
         * However, via system properties, you may choose which JMS client to use (activemq or artemis, and
         * you may also explicitly specify the class name of a MatsTestBroker implementation. Note: rabbitmq is not
         * supported yet), and you may specify which URL to use (with a special value "localhost" denoting the
         * client-specific way to connect to a standard broker-installation on localhost).
         *
         * Both ActiveMQ and Artemis supports in-vm creation of the broker (server) - which is the default.
         *
         * == Run all tests with in-vm ActiveMQ brokers (ActiveMQ is default, in-vm is default)
         * ./gradlew clean test
         *
         * == Run all tests with in-vm Artemis MQ brokers (Apache ActiveMQ Artemis, formerly JBoss HornetQ,
         * and what Red Hat AMQ is based upon. In-vm is default):
         * ./gradlew -Pmats.test.broker=artemis clean test
         *
         * == Run all tests against an external ActiveMQ MQ broker on localhost (ActiveMQ is default).
         * ./gradlew -Pmats.test.brokerurl=localhost clean test
         *
         * == Run all tests against an external ActiveMQ MQ broker on specific URL (ActiveMQ is default).
         * (This URL happens to be identical to specifying just "localhost" for ActiveMQ)
         * ./gradlew -Pmats.test.brokerurl="tcp://localhost:61616" clean test
         *
         * == Run all tests against an external Artemis MQ broker on localhost:
         * ./gradlew -Pmats.test.broker=artemis -Pmats.test.brokerurl=localhost clean test
         *
         * == Run with your own implementation of MatsTestBroker:
         * ./gradlew -Pmats.test.broker=com.example.MyMatsTestBrokerImpl clean test
         */
        systemProperties project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"])

        // Move over the CI environment variable, so that we can increase timings of tests if on CI environment.
        // (Check MatsTestLatch.WAIT_MILLIS_FOR_NON_OCCURENCE)
        systemProperties System.getenv().subMap(["CI"])

        testLogging {
            exceptionFormat = 'full'
        }
    }

    // ------------------------------------------------
    // -- Simple tools

    // Define dependency report task that all subprojects gets. Invoke with "./gradlew allDeps | less"
    tasks.register('allDeps', DependencyReportTask) {}

    // Some info about current gradle environment.
    tasks.register('systemInformation') {
        def gradleVersion = gradle.gradleVersion // Needed due to config cache.
        doLast {
            println "\n** Java properties [System.getProperties()], sorted:\n"
            System.properties.sort().each { k, v ->
                println("$k = $v")
            }
            println "\n** Environment [System.getenv()], sorted:\n"
            System.env.sort().each { k, v ->
                println("$k = $v")
            }
            println ''
            println "** Java Version:   " + System.getProperty("java.version")
            println "** Groovy Version: " + GroovySystem.getVersion()
            println "** Gradle Version: " + gradleVersion
        }
    }
}

// For "all JavaDoc" task, sweeping together all sources to make a complete set of JavaDoc in one go.
// - Adapted from https://coderwall.com/p/evtdbw/aggregate-javadoc-in-multiproject-gradle-builds
apply plugin: 'java'
tasks.register('alljavadoc', Javadoc) {
    def relevantProjects = subprojects.findAll { ! it.name.startsWith('mats-api-test') }
    source relevantProjects.collect { it.sourceSets.main.allJava }
    classpath = files(relevantProjects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${layout.buildDirectory}/docs/javadoc")
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('--frames')
}
// .. ensure 'alljavadoc' is run together with './gradlew clean javadoc', thus building 'all' + submodules.
javadoc.dependsOn alljavadoc

// For publishing subprojects: All, minus 'mats-api-test*'
configure(subprojects.findAll { ! it.name.startsWith('mats-api-test') }) {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    signing {
        // Sign everything, even MD5s and SHAs..
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'Mats^3'
                    description = 'Message-based Asynchronous Transactional Staged Stateless Services'
                    url = 'https://github.com/centiservice/mats3'
                    licenses {
                        license {
                            name = 'PolyForm Perimeter License 1.0.0 with examples'
                            url = 'https://github.com/centiservice/mats3/blob/main/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre St√∏lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/stolsvik/mats.git'
                        developerConnection = 'scm:git:ssh://github.com:centiservice/mats3.git'
                        url = 'https://github.com/centiservice/mats3'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name 'SonatypeOSSRHSnapshot'
                url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
            maven {
                name 'SonatypeOSSRHStaging'
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
        }
    }

    // Tasks to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    tasks.register('matsPublishSnapshot') { dependsOn publishAllPublicationsToSonatypeOSSRHSnapshotRepository }
    tasks.register('matsPublishStaging') { dependsOn publishAllPublicationsToSonatypeOSSRHStagingRepository }
}