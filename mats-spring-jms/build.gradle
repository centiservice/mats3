// mats-spring-jms

dependencies {
    api project(":mats-spring")
    api project(":mats-impl-jms")
    api project(":mats-util")

    implementation "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion"

    // :: compileOnly
    // Spring: Bring your own, so compileOnly
    compileOnly "org.springframework:spring-context:$springVersion"
    compileOnly "org.springframework:spring-tx:$springVersion"
    compileOnly "org.springframework:spring-jdbc:$springVersion"
    // The ScenarioConnectionFactoryProducer employs the MatsTestBroker if in testing
    // Don't want this in any production classpath, so bring your own to the testing classpath of your project.
    compileOnly project(":mats-test-broker")
    // Need the two constants: MatsTestFactory.TEST_MAX_DELIVERY_ATTEMPTS and MatsTestFactory.TEST_CONCURRENCY.
    // (When running in test, mats-test will probably always be present. Also, these are compiled constants.)
    compileOnly project(":mats-test")
    // JMS API - since you must pull in a JMS Client, which thus provides the JMS API, we use compileOnly.
    compileOnly "jakarta.jms:jakarta.jms-api:$jmsVersion"
    // The SFL4J API. Since you should provide the SLF4J implementation yourself, we use compileOnly.
    compileOnly "org.slf4j:slf4j-api:$slf4jVersion"

    // :: TEST

    testImplementation project(":mats-test")
    testImplementation project(":mats-spring")
    testImplementation project(":mats-serial-json")
    testImplementation project(":mats-spring-test")
    testImplementation project(":mats-test-broker")
    // RandomString
    testImplementation project(":mats-util")

    // @Inject
    testImplementation "jakarta.inject:jakarta.inject-api:$jakartaInjectVersion"
    // The JUnit library
    testImplementation "junit:junit:$junitVersion"
    // Using H2 for testing of database tx.
    testImplementation "com.h2database:h2:$h2Version"

    // JMS API - to "handle" the ConnectionFactory - provided by 'mats-test' via 'implementation'.
    testCompileOnly "jakarta.jms:jakarta.jms-api:$jmsVersion"

    // Spring: compileOnly above - we need it to run
    // Annotation
    testImplementation "org.springframework:spring-context:$springVersion"
    // Using @RunWith(SpringRunner.class)
    testImplementation "org.springframework:spring-test:$springVersion"
    // Test with HibernateTransactionManager
    testImplementation "org.springframework:spring-orm:$springVersion"
    testImplementation "org.hibernate:hibernate-core:$hibernateVersion"
    // Need logging system in tests
    testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"
    testRuntimeOnly "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
}

mavenPublishing {
    pom {
        name = 'Mats^3 Spring tooling for Mats^3 JMS Implementation'
        description = 'Mats^3 Spring tooling for the Mats^3 JMS implementation, including an' +
                ' implementation of JmsMatsTransactionManager using Spring\'s PlatformTransactionManager,' +
                ' and tooling for configuring a MatsFactory for different scenarios: development, staging,' +
                ' production.'
    }
}
