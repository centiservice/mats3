// mats-spring-test

dependencies {
    // MatsTestLatch (provided in the simple test context)
    api project(":mats-test")
    // MatsFuturizer (provided in the simple test context)
    api project(":mats-util")

    // @EnableMats
    implementation project(":mats-spring")
    // mats-spring-test employs mats-spring-jms to provide JmsMatsFactories
    implementation project(":mats-spring-jms")
    // MatsSerializerJson (default serializer, if you do not provide yourself)
    implementation project(":mats-serial-json")
    // Used by TestSpringMatsFactoryProvider to provide underlying MQ for MatsFactories.
    implementation project(':mats-test-broker')

    // Spring. Bring your own, so compileOnly
    compileOnly "org.springframework:spring-test:$springVersion"
    compileOnly "org.springframework:spring-context:$springVersion"
    compileOnly "org.springframework:spring-tx:$springVersion"
    compileOnly "org.springframework:spring-jdbc:$springVersion"
    // The SFL4J API. Since you should provide the SLF4J implementation yourself, we use compileOnly.
    compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
    // H2 Database, for database tests - but we do not want to make this dependency transitive, so compileOnly.
    compileOnly "com.h2database:h2:$h2Version"

    // JMS API - since you must pull in a JMS Client, which thus provides the JMS API, we use compileOnly.
    compileOnly "$jmsApiDependency"

    // :: TEST

    // @Inject
    testImplementation "javax.inject:javax.inject:$javaxInjectVersion"
    // @PostConstruct
    testImplementation "javax.annotation:javax.annotation-api:$javaxAnnotationVersion"

    // Spring: compileOnly above - now we need it to run.
    testImplementation "org.springframework:spring-test:$springVersion"
    testImplementation "org.springframework:spring-beans:$springVersion"
    testImplementation "org.springframework:spring-tx:$springVersion"
    testImplementation "org.springframework:spring-jdbc:$springVersion"
    // .. and then some more
    testImplementation "org.springframework:spring-context:$springVersion"
    // We want the standard logging, which will be auto-installed by being on the classpath.
    testImplementation project(':mats-intercept-logging')
    // Also pulling in the metrics, to get a test of it for all types of mats flows. (autoinstalls)
    testImplementation project(':mats-intercept-micrometer')
    // Also pulling in the LocalStatsMatsInterceptor, to get it tested. (explicit install)
    testImplementation project(':mats-localinspect')

    // H2: compileOnly above - now we need it to run
    testImplementation "com.h2database:h2:$h2Version"

    // JMS API - to "handle" the ConnectionFactory - provided by 'mats-test' via 'implementation'.
    testCompileOnly "$jmsApiDependency"

    // Rule_MatsEndpoint
    testImplementation project(":mats-test-junit")
    // Checking that it works with Remock
    testImplementation ("no.saua.remock:remock:$remockVersion") {
        exclude group: 'org.springframework'
    }
    // Need logging system in tests
    testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"
    testRuntimeOnly "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Mats^3 Spring testing tooling'
                description = 'Mats^3 Spring-specific testing tools, for quickly firing up a test-harness using' +
                        ' either JUnit or Jupiter (JUnit 5).'
            }
        }
    }
}