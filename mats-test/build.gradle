// mats-test

dependencies {
    // The Mats API
    api project(':mats-api')
    // The MatsFuturizer is provided as a convenience in the Rule_Mats and Extension_Mats
    api project(':mats-util')

    // The SFL4J API. Since you should provide the SLF4J implementation yourself, we use compileOnly.
    compileOnly "org.slf4j:slf4j-api:$slf4jVersion"

    // We need an implementation of the Mats API
    implementation project(':mats-impl-jms')
    // Need the MatsSerializerJson
    implementation project(":mats-serial-json")

    // Backing message brokers:
    // We need a backing JMS-based Message Broker; MatsTestBroker is a tool that provides easy instantiation of such.
    // (Note that the MatsTestBroker does NOT transitively depend on any broker server or client, as MatsTestBroker also
    // is pulled in by mats-spring-jms (which is meant for prod code) in conjunction with that toolset's readiness for
    // testing. Therefore, we are pulling in the message broker and client dependencies here: If you depend on the
    // 'mats-test' project, you are clearly inside a test-part of the project, not production. Also therefore, it does
    // not matter as much that we pull in a bit too much; We'll pull in both ActiveMQ and Artemis (both broker and
    // client), even though we'll probably only be using one of them, and that is probably ActiveMQ due to the test
    // tooling defaulting to this.)
    implementation project(':mats-test-broker')
    // .. therefore, also pull in ActiveMQ Client and broker (actually, broker brings in client, but to be explicit)
    implementation "org.apache.activemq:activemq-client:$activeMqVersion"
    implementation "org.apache.activemq:activemq-broker:$activeMqVersion"
    // .. and pull in Artemis (Apache ActiveMQ Artemis) Client and Server, since you can choose to test with it.
    // .. (note that Artemis has always used JMS 2.0.)
    implementation "org.apache.activemq:artemis-jms-client:$artemisMqVersion"
    implementation "org.apache.activemq:artemis-server:$artemisMqVersion"

    // H2 Database, for database tests - but we do not want to make this dependency transitive, so compileOnly.
    compileOnly "com.h2database:h2:$h2Version"

    // Spring dependencies for MatsAnnotatedClasses. This is compileOnly, as if you are not using Spring, then
    // you should not need this.
    compileOnly "org.springframework:spring-context:$springVersion"
    compileOnly project(':mats-spring')

    // === TEST
    testImplementation "junit:junit:$junitVersion"
    // Include the logging and micrometer
    testImplementation project(":mats-intercept-logging")
    testImplementation project(":mats-intercept-micrometer")
}

// To get output from the Test_CI_Variable "test"
test {
    testLogging {
        showStandardStreams = true
    }
}

mavenPublishing {
    pom {
        name = 'Mats^3 Testing tooling'
        description = 'Mats^3 Testing tools, as well as the base for specific JUnit or Jupiter (Junit 5) tools.'
    }
}